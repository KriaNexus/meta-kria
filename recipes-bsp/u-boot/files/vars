autoload=no
baudrate=115200
boot_a_script=load ${devtype} ${devnum}:${distro_bootpart} ${scriptaddr} ${prefix}${script}; source ${scriptaddr}
boot_efi_binary=if fdt addr ${fdt_addr_r}; then bootefi bootmgr ${fdt_addr_r};else bootefi bootmgr ${fdtcontroladdr};fi;load ${devtype} ${devnum}:${distro_bootpart} ${kernel_addr_r} efi/boot/bootaa64.efi; if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r};else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi
boot_extlinux=sysboot ${devtype} ${devnum}:${distro_bootpart} any ${scriptaddr} ${prefix}${boot_syslinux_conf}
boot_net_usb_start=usb start
boot_prefixes=/ /boot/
boot_script_dhcp=boot.scr.uimg
boot_scripts=boot.scr.uimg boot.scr
boot_syslinux_conf=extlinux/extlinux.conf
bootcmd_dhcp=run boot_net_usb_start; if dhcp ${scriptaddr} ${boot_script_dhcp}; then source ${scriptaddr}; fi;setenv efi_fdtfile ${fdtfile}; setenv efi_old_vci ${bootp_vci};setenv efi_old_arch ${bootp_arch};setenv bootp_vci PXEClient:Arch:00011:UNDI:003000;setenv bootp_arch 0xb;if dhcp ${kernel_addr_r}; then tftpboot ${fdt_addr_r} dtb/${efi_fdtfile};if fdt addr ${fdt_addr_r}; then bootefi ${kernel_addr_r} ${fdt_addr_r}; else bootefi ${kernel_addr_r} ${fdtcontroladdr};fi;fi;setenv bootp_vci ${efi_old_vci};setenv bootp_arch ${efi_old_arch};setenv efi_fdtfile;setenv efi_old_arch;setenv efi_old_vci;
bootcmd_jtag=echo JTAG: Trying to boot script at ${scriptaddr} && source ${scriptaddr}; echo JTAG: SCRIPT FAILED: continuing...;
bootcmd_mmc0=devnum=0; run mmc_boot
bootcmd_mmc1=devnum=1; run mmc_boot
bootcmd_nand0= nand info && nand read $scriptaddr $script_offset_f $script_size_f && echo NAND: Trying to boot script at ${scriptaddr} && source ${scriptaddr}; echo NAND: SCRIPT FAILED: continuing...;
bootcmd_pxe=run boot_net_usb_start; dhcp; if pxe get; then pxe boot; fi
bootcmd_qspi0=sf probe 0 0 0 && sf read $scriptaddr $script_offset_f $script_size_f && echo QSPI: Trying to boot script at ${scriptaddr} && source ${scriptaddr}; echo QSPI: SCRIPT FAILED: continuing...;
bootcmd_scsi0=devnum=0; run scsi_boot
bootcmd_usb0=devnum=0; run usb_boot
bootcmd_usb1=devnum=1; run usb_boot
bootdelay=2
bootfstype=fat
bootm_low=0
bootm_size=80000000
dfu_ram=run dfu_ram_info && dfu 0 ram 0
dfu_ram_info=setenv dfu_alt_info Image ram $kernel_addr $kernel_size\\;system.dtb ram $fdt_addr $fdt_size
distro_bootcmd=scsi_need_init=; for target in ${boot_targets}; do run bootcmd_${target}; done
efi_dtb_prefixes=/ /dtb/ /dtb/current/
fdt_addr_r=0x40000000
fdt_high=10000000
fileaddr=18000000
initrd_high=79000000
kernel_addr_r=0x18000000
load_efi_dtb=load ${devtype} ${devnum}:${distro_bootpart} ${fdt_addr_r} ${prefix}${efi_fdtfile}
mmc_boot=if mmc dev ${devnum}; then devtype=mmc; run scan_dev_for_boot_part; fi
pxefile_addr_r=0x10000000
ramdisk_addr_r=0x02100000
scan_dev_for_boot=echo Scanning ${devtype} ${devnum}:${distro_bootpart}...; for prefix in ${boot_prefixes}; do run scan_dev_for_extlinux; run scan_dev_for_scripts; done;run scan_dev_for_efi;
scan_dev_for_boot_part=part list ${devtype} ${devnum} -bootable devplist; env exists devplist || setenv devplist 1; for distro_bootpart in ${devplist}; do if fstype ${devtype} ${devnum}:${distro_bootpart} bootfstype; then run scan_dev_for_boot; fi; done; setenv devplist
scan_dev_for_efi=setenv efi_fdtfile ${fdtfile}; for prefix in ${efi_dtb_prefixes}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${efi_fdtfile}; then run load_efi_dtb; fi;done;if test -e ${devtype} ${devnum}:${distro_bootpart} efi/boot/bootaa64.efi; then echo Found EFI removable media binary efi/boot/bootaa64.efi; run boot_efi_binary; echo EFI LOAD FAILED: continuing...; fi; setenv efi_fdtfile
scan_dev_for_extlinux=if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${boot_syslinux_conf}; then echo Found ${prefix}${boot_syslinux_conf}; run boot_extlinux; echo SCRIPT FAILED: continuing...; fi
scan_dev_for_scripts=for script in ${boot_scripts}; do if test -e ${devtype} ${devnum}:${distro_bootpart} ${prefix}${script}; then echo Found U-Boot script ${prefix}${script}; run boot_a_script; echo SCRIPT FAILED: continuing...; fi; done
script_offset_f=3e80000
script_size_f=0x80000
scriptaddr=0x20000000
scsi_boot=run scsi_init; if scsi dev ${devnum}; then devtype=scsi; run scan_dev_for_boot_part; fi
scsi_init=if ${scsi_need_init}; then scsi_need_init=false; scsi scan; fi
thor_ram=run dfu_ram_info && thordown 0 ram 0
usb_boot=usb start; if usb dev ${devnum}; then devtype=usb; run scan_dev_for_boot_part; fi

# Remove boot_targets completely and cleanup all temporary variables
tpm_start=tpm init && tpm startup TPM2_SU_CLEAR && echo "TPM done"
eth_phy_reset=gpio toggle 38 && gpio toggle 38
preboot=setenv boot_targets; setenv modeboot; run tpm_start; cls; run usb_init; run ethsom;
#run usb_init
#&& setenv preboot

# Boot menu
bootmenu_delay=5
bootmenu_0=Auto-Select - 1. CC boot 2. SOM boot=run som_cc_boot || run som_mmc_boot
bootmenu_1=Carrier Card (CC) boot device=run som_cc_boot
bootmenu_2=System on Module (SOM) boot device=run som_mmc_boot
bootmenu_default=0

# SOM specific boot methods
som_cc_boot=setenv boot_targets mmc1 && run distro_bootcmd
som_mmc_boot=setenv boot_targets mmc0 && run distro_bootcmd
starter=SMK-K26-XCL2G-ED
som=if test ${board_name} = ${starter} ; then run som_cc_boot; else bootmenu; fi

bootcmd=run som

qspi=sf probe && load mmc 1 100000 boot.bin && sf erase 0 +${filesize} && sf write 100000 0 ${filesize}
qspi0=sf probe && load mmc 1 100000 boot.bin && sf erase 200000 +${filesize} && sf write 100000 200000 ${filesize}
qspi1=sf probe && load mmc 1 100000 boot.bin && sf erase f80000 +${filesize} && sf write 100000 f80000 ${filesize}

som_eeprom_unlock=i2c dev 1; i2c mw 68 25 00
som_eeprom_lock=i2c dev 1; i2c mw 68 25 3f

# ULPI reset is not handled here but it should via modepin driver, waiting is required for usb hub to get to stable state
usb_hub_reset=gpio clear gpio@ff0a000044 && gpio set gpio@ff0a000044
usb_hub_init=i2c dev 1 && mw 1000 0056 && sleep 1 && i2c write 1000 2d aa 2 -s


usb_init=run usb-kv260; run usb-kr260;
 #&& usb start
usb-kv260=if test ${card1_name}-rev${card1_rev} = SCK-KV-G-revB; then run usb_init_kv260_revb; run kv260_gem3; fi
usb-kr260=if test ${card1_name}-rev${card1_rev} = SCK-KR-G-revA; then run eth0mac; run eth1mac; run usb_init_kr260; run kr260_gem1; run kr260_gem0; fi

# MIO 52 - 63
usb0_pins=mw 0xff1800d0 0x4 0xc && mw 0xFF180208 2020
# MIO 64 - 75
usb1_pins=mw 0xFF180100 0x4 0xc
usb_init_kv260_revb=run usb_hub_reset; run usb_hub_init && run usb0_pins
usb_init_kr260=mw 1000 0056; i2c dev 2 && gpio clear resetchip4 && gpio set resetchip4 && sleep 0.1 && i2c write 1000 2d aa 2 -s && run usb1_pins; i2c dev 3 && gpio clear resetchip3 && gpio set resetchip3 && sleep 0.1 && i2c write 1000 2d aa 2 -s && run usb0_pins

#run usb0_pins; 

# MIO 38-52
eth_pins=mw 0xFF180098 0x2 0xe

#i2c dev 1
#i2c mw 68 25 00
#i2c mw 50 44 42
#i2c mw 50 67 87

#i2c read 50 0 100 1000000
#fru capture 1000000
#fru display

#point timer output to MIO7
pwm7=mw 0xFF18001C 0xa0

#point timer output to MIO23
pwm23=mw 0xFF18005C 0xa0

som_pwm=load mmc 1 100000 fpga.bit && fpga loadb 0 100000 $filesize && pwm config 0 0 10000 1200 && pwm enable 0 0 && pwm config 0 0 10000 1400 && pwm config 0 0 10000 1600


kr260_gem0=gpio clear resetchip5 && gpio set resetchip5 && setenv ethact ethernet@ff0b0000 && dhcp
kr260_gem1=mw 0xFF180098 2 c && mw 0xFF1800c8 0x80 2 && mw 0xFF180208 0x00B3F020 && mw 0xFF180164 0x03FFF57F && gpio clear resetchip6 && gpio set resetchip6 && setenv ethact ethernet@ff0c0000 && dhcp
kv260_gem3=mw 0xFF18020C 0xFC0 && run eth_phy_reset

ethsom=echo "Reading MAC from som" && i2c dev 1 && setenv loadaddr 1000 && i2c read 50 83 6 $loadaddr && run buildmac0
eth0mac=echo "Reading MAC addr0" && i2c dev 1 && setenv loadaddr 1000 && i2c read 51 83 6 $loadaddr && run buildmac1
eth1mac=echo "Reading MAC addr1" && i2c dev 1 && setenv loadaddr 1000 && i2c read 51 89 6 $loadaddr && run buildmac2

buildmac= e=" "; sep=" " ; for i in 0 1 2 3 4 5 ; do setexpr x $loadaddr + $i ; setexpr.b b *$x; e="$e$sep$b"; sep=":"; done
buildmac0= run buildmac && setenv -f ethaddr $e
buildmac1= run buildmac && setenv -f eth1addr $e
buildmac2= run buildmac && setenv -f eth2addr $e


#run ethsom;
#fdt addr $fdtcontroladdr
#fdt get addr po /axi/ethernet@ff0c0000 local-mac-address
#fdt print /axi/ethernet@ff0c0000
#echo $po
#cp.b $loadaddr $po 6
#fdt print /axi/ethernet@ff0c0000

#run ethsom
#cp $fdtcontroladdr 10000 5000
#fdt addr 10000
#fdt resize
#fdt print /axi/ethernet@ff0c0000
#fdt set /axi/ethernet@ff0c0000/ local-mac-address 12345
#fdt get addr po /axi/ethernet@ff0c0000 local-mac-address
#fdt print /axi/ethernet@ff0c0000
#echo $po
#cp.b $loadaddr $po 6
#fdt print /axi/ethernet@ff0c0000
